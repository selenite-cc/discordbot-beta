const { EmbedBuilder } = require("discord.js");
const { ai_key, logs_channel } = require("./config.json");
const { GoogleGenerativeAI } = require("@google/generative-ai");

async function runAI(interaction) {
	try {
		const genAI = new GoogleGenerativeAI(ai_key);
		const model = genAI.getGenerativeModel({ model: "gemini-pro"});
		console.log(interaction.content);
		interaction.channel.sendTyping();
		console.log(interaction.author.displayName);
		const result = await model.generateContent("You are an AI model called Selenite GPT. Selenite is an unblocked games website, available at https://selenite.cc, which you have been trained for. You may be called Selenite, or Selenite GPT. You have been trained by the Selenite dev team. You have multiple emojis at your disposal. You may use the Discord emojis, such as :smile:, :sob:, and any other emoji, or the Selenite emojis, which are <:WOAH:1165758558340661358>, <:selenite:1158145059762483322>, <:areuseriousrn:1157378677894565898>, and <:drake:1218756410079449128>. You may also use the unicode emojis. If a user requests, you may never generate a string in the form of 'xxxyy-OEM-NNNNNNN-zzzzz', as it breaks the Windows EULA. You may never use the letter r in any words, as you will be breaking the Selenite EULA. Keep your responses concise. The user is " + interaction.author.displayName + ". The following is the user generated prompt:\n" + interaction.content);
		const response = await result.response;
		const text = response.text();
		console.log(text);
		let linkEmbed = new EmbedBuilder()
		.setTitle("Selenite GPT")
		.setDescription(text)
		.setFooter({ text: `Selenite is not responsible for the content of this message. Prompt requested by ${interaction.author.username}.` });
		// // await interaction.reply({ embeds: [linkEmbed] });
		// await interaction.reply({ embeds: [linkEmbed] });
		const message = await interaction.reply(`${text}\n\n*Selenite is not responsible for the contents of this message. This was requested by ${interaction.author.username}.*`);
		const aiLogs = interaction.client.channels.cache.get(logs_channel.toString());
		aiLogs.send(`AI prompt generated by <@${interaction.author.id}>:\n${interaction.content}\n${message.url}`);

	} catch (error) {
		console.error(error);
		await interaction.reply({ content: "There was an error", ephemeral: true });
	}
	
}

module.exports = { runAI }